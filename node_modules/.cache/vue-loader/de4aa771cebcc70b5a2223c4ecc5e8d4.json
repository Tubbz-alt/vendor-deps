{"remainingRequest":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/myml/Src/deepin/deepin-manual/src/manual-web/src/components/Content.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/src/components/Content.vue","mtime":1540289763988},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/ts-loader/index.js","mtime":1535964694475},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/cache-loader/dist/cjs.js","mtime":1535964698825},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/vue-loader/lib/index.js","mtime":1538028549491}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\nimport Vue from 'vue';\nimport MyPreviewMan from '@/components/Preview-Man.vue';\nimport scrollIntoView from 'smooth-scroll-into-view-if-needed';\nimport { PreviewMan } from '@/store';\nimport { waitImg } from '@/helper/wait-img';\nexport default Vue.extend({\n  components: { MyPreviewMan },\n  props: {\n    html: String,\n  },\n  data() {\n    return {\n      currentHeading: '',\n      headingScroll: 0,\n    };\n  },\n  computed: {\n    heading(): string {\n      return this.$store.state.heading;\n    },\n    navWidth(): number {\n      return this.$store.state.navWidth;\n    },\n    previewMan(): PreviewMan {\n      return this.$store.state.previewMan;\n    },\n    content(): HTMLDivElement {\n      // 路由变化 计算属性刷新\n      const _ = this.$route;\n      return this.$refs.content as HTMLDivElement;\n    },\n    hList(): Array<HTMLHeadingElement> {\n      return Array.from<HTMLHeadingElement>(this.content.querySelectorAll('h2,h3'));\n    },\n  },\n  watch: {\n    heading(val: string) {\n      this.scrollTo(val);\n    },\n    $route: {\n      immediate: true,\n      handler() {\n        const heading = this.$route.query.heading;\n        this.currentHeading = '';\n        Vue.nextTick(() => {\n          waitImg(this.content).then(() => {\n            this.scrollTo(heading);\n          });\n        });\n      },\n    },\n  },\n  methods: {\n    scrollTo(heading: string) {\n      if (this.currentHeading === heading) {\n        return;\n      }\n      let el = document.getElementById(heading);\n      if (!el) {\n        el = document.getElementById('h1');\n      }\n      if (el) {\n        this.currentHeading = el.id;\n        this.headingScroll++;\n        scrollIntoView(el, { block: 'start' }).then(() => {\n          this.headingScroll--;\n        });\n        this.$store.commit('setHeading', this.currentHeading);\n      }\n    },\n    scroll() {\n      if (this.headingScroll != 0) {\n        return;\n      }\n      if (this.previewMan) {\n        this.$store.commit('previewMan', null);\n      }\n      const limit = window.innerHeight / 2;\n      for (const h of this.hList) {\n        const top = h.getBoundingClientRect().top;\n        if (top > limit) {\n          break;\n        }\n        this.currentHeading = h.id;\n        if (top >= 0 && top < limit) {\n          break;\n        }\n      }\n      if (this.currentHeading != this.heading) {\n        this.$store.commit('setHeading', this.currentHeading);\n      }\n    },\n    click(e: MouseEvent) {\n      switch (e.toElement.nodeName) {\n        case 'IMG': {\n          const el = e.toElement as HTMLImageElement;\n          const ext = el.src.slice(el.src.lastIndexOf('.') + 1);\n          if (['jpg', 'png', 'jpeg'].includes(ext)) {\n            this.$store.commit('previewImage', el.src);\n          }\n          break;\n        }\n        case 'A': {\n          const el = e.toElement as HTMLLinkElement;\n          const href = el.getAttribute('href');\n          if (!href) {\n            return;\n          }\n          switch (true) {\n            // 锚跳转\n            case href.startsWith('#'): {\n              const hash = href.slice('#'.length);\n              const el = this.hList.find(heading => heading.innerText === hash);\n              if (el) {\n                this.scrollTo(el.id);\n              }\n              break;\n            }\n            // 弹窗预览\n            case href.startsWith('dman://'): {\n              let [name, heading] = href.slice('dman://'.length).split('#');\n              if (name.startsWith('/')) {\n                name = name.slice(1);\n              }\n              if (\n                this.previewMan &&\n                this.previewMan.name === name &&\n                this.previewMan.heading === heading\n              ) {\n                this.$store.commit('previewMan', null);\n              } else {\n                this.$store.commit('previewMan', { name, heading, x: e.clientX, y: e.clientY });\n              }\n              break;\n            }\n          }\n          break;\n        }\n        default:\n          if (this.previewMan) {\n            this.$store.commit('previewMan', null);\n          }\n      }\n    },\n  },\n});\n",{"version":3,"sources":["Content.vue"],"names":[],"mappingsfile":"Content.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\" :style=\"{'padding-left':`${navWidth}px`}\" @click.stop.prevent=\"click\">\n    <my-scrollbar @scroll=\"scroll\" savePosition>\n      <div class=\"content fill\" ref=\"content\" v-html=\"html\"></div>\n    </my-scrollbar>\n    <my-preview-man></my-preview-man>\n  </div>\n</template>\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport MyPreviewMan from '@/components/Preview-Man.vue';\nimport scrollIntoView from 'smooth-scroll-into-view-if-needed';\nimport { PreviewMan } from '@/store';\nimport { waitImg } from '@/helper/wait-img';\nexport default Vue.extend({\n  components: { MyPreviewMan },\n  props: {\n    html: String,\n  },\n  data() {\n    return {\n      currentHeading: '',\n      headingScroll: 0,\n    };\n  },\n  computed: {\n    heading(): string {\n      return this.$store.state.heading;\n    },\n    navWidth(): number {\n      return this.$store.state.navWidth;\n    },\n    previewMan(): PreviewMan {\n      return this.$store.state.previewMan;\n    },\n    content(): HTMLDivElement {\n      // 路由变化 计算属性刷新\n      const _ = this.$route;\n      return this.$refs.content as HTMLDivElement;\n    },\n    hList(): Array<HTMLHeadingElement> {\n      return Array.from<HTMLHeadingElement>(this.content.querySelectorAll('h2,h3'));\n    },\n  },\n  watch: {\n    heading(val: string) {\n      this.scrollTo(val);\n    },\n    $route: {\n      immediate: true,\n      handler() {\n        const heading = this.$route.query.heading;\n        this.currentHeading = '';\n        Vue.nextTick(() => {\n          waitImg(this.content).then(() => {\n            this.scrollTo(heading);\n          });\n        });\n      },\n    },\n  },\n  methods: {\n    scrollTo(heading: string) {\n      if (this.currentHeading === heading) {\n        return;\n      }\n      let el = document.getElementById(heading);\n      if (!el) {\n        el = document.getElementById('h1');\n      }\n      if (el) {\n        this.currentHeading = el.id;\n        this.headingScroll++;\n        scrollIntoView(el, { block: 'start' }).then(() => {\n          this.headingScroll--;\n        });\n        this.$store.commit('setHeading', this.currentHeading);\n      }\n    },\n    scroll() {\n      if (this.headingScroll != 0) {\n        return;\n      }\n      if (this.previewMan) {\n        this.$store.commit('previewMan', null);\n      }\n      const limit = window.innerHeight / 2;\n      for (const h of this.hList) {\n        const top = h.getBoundingClientRect().top;\n        if (top > limit) {\n          break;\n        }\n        this.currentHeading = h.id;\n        if (top >= 0 && top < limit) {\n          break;\n        }\n      }\n      if (this.currentHeading != this.heading) {\n        this.$store.commit('setHeading', this.currentHeading);\n      }\n    },\n    click(e: MouseEvent) {\n      switch (e.toElement.nodeName) {\n        case 'IMG': {\n          const el = e.toElement as HTMLImageElement;\n          const ext = el.src.slice(el.src.lastIndexOf('.') + 1);\n          if (['jpg', 'png', 'jpeg'].includes(ext)) {\n            this.$store.commit('previewImage', el.src);\n          }\n          break;\n        }\n        case 'A': {\n          const el = e.toElement as HTMLLinkElement;\n          const href = el.getAttribute('href');\n          if (!href) {\n            return;\n          }\n          switch (true) {\n            // 锚跳转\n            case href.startsWith('#'): {\n              const hash = href.slice('#'.length);\n              const el = this.hList.find(heading => heading.innerText === hash);\n              if (el) {\n                this.scrollTo(el.id);\n              }\n              break;\n            }\n            // 弹窗预览\n            case href.startsWith('dman://'): {\n              let [name, heading] = href.slice('dman://'.length).split('#');\n              if (name.startsWith('/')) {\n                name = name.slice(1);\n              }\n              if (\n                this.previewMan &&\n                this.previewMan.name === name &&\n                this.previewMan.heading === heading\n              ) {\n                this.$store.commit('previewMan', null);\n              } else {\n                this.$store.commit('previewMan', { name, heading, x: e.clientX, y: e.clientY });\n              }\n              break;\n            }\n          }\n          break;\n        }\n        default:\n          if (this.previewMan) {\n            this.$store.commit('previewMan', null);\n          }\n      }\n    },\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  min-width: 600px;\n  height: 100vh;\n}\n.fill {\n  margin-bottom: calc(100vh - 3rem);\n}\n</style>\n\n\n<style lang=\"scss\">\n.content {\n  width: 80%;\n  max-width: 700px;\n  margin: auto;\n  padding: 0 10%;\n  font-size: 13px;\n  color: #000;\n  outline: 0px;\n  h2 {\n    font-weight: normal;\n    font-size: 20px;\n    color: #1f94ee;\n    margin: 0px;\n    padding-top: 23px;\n  }\n  ul,\n  ol {\n    margin: 0;\n    padding: 0;\n  }\n  li {\n    margin-left: 2em;\n    line-height: 24px;\n  }\n  img {\n    &[src$='svg'] {\n      height: 1rem;\n      vertical-align: middle;\n    }\n    &[src$='png'],\n    &[src$='jpg'] {\n      max-width: 100%;\n      margin-top: 26px;\n      max-width: 99%;\n      cursor: pointer;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    &[src$='jpg'] {\n      box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.1);\n    }\n  }\n  p {\n    line-height: 2em;\n    margin: 0;\n  }\n  table {\n    color: #606060;\n    border-collapse: collapse;\n    border-top: 2px solid rgba(0, 0, 0, 0.1);\n    border-bottom: 2px solid rgba(0, 0, 0, 0.1);\n    margin-top: 20px;\n    // white-space: nowrap;\n    //表格block等级\n    @for $i from 1 to 5 {\n      &.block#{$i} {\n        width: 100% / $i - 1%;\n        float: left;\n        margin-right: 1%;\n      }\n    }\n    tr {\n      border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n      font-size: 12px;\n      td {\n        padding: 5px;\n      }\n    }\n    caption {\n      text-align: left;\n    }\n  }\n  a {\n    text-decoration: none;\n    font-weight: bold;\n    color: #757575;\n    cursor: pointer;\n    &[href^='http'] {\n      &:after {\n        content: '🔗';\n      }\n    }\n    &[href^='#'] {\n      color: #0082fa;\n    }\n    &[href^='dman://'] {\n      color: #4e64f6;\n      &:after {\n        content: ' 📃 ';\n      }\n    }\n  }\n  blockquote {\n    margin: 0;\n    font-style: italic;\n  }\n}\n</style>\n"]}]}