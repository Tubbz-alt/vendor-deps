{"remainingRequest":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/ts-loader/index.js??ref--13-1!/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/eslint-loader/index.js??ref--12-0!/home/myml/Src/deepin/deepin-manual/src/manual-web/src/helper/fetch-file.ts","dependencies":[{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/src/helper/fetch-file.ts","mtime":1540289763988},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/cache-loader/dist/cjs.js","mtime":1535964698825},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/ts-loader/index.js","mtime":1535964694475},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/eslint-loader/index.js","mtime":1538208286718}],"contextDependencies":[],"result":["export function fetchFile(path) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            resolve(xhr.responseText);\n        };\n        xhr.onerror = function (err) {\n            console.error(err);\n            reject('Request failed');\n        };\n        xhr.open('GET', path);\n        xhr.send();\n    });\n}\n",{"version":3,"file":"/home/myml/Src/deepin/deepin-manual/src/manual-web/src/helper/fetch-file.ts","sourceRoot":"","sources":["/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/eslint-loader/index.js??ref--12-0!/home/myml/Src/deepin/deepin-manual/src/manual-web/src/helper/fetch-file.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,SAAS,CAAC,IAAY;IACpC,OAAO,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;QACzC,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QACjC,GAAG,CAAC,MAAM,GAAG;YACX,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC5B,CAAC,CAAC;QACF,GAAG,CAAC,OAAO,GAAG,UAAA,GAAG;YACf,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAC3B,CAAC,CAAC;QACF,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACtB,GAAG,CAAC,IAAI,EAAE,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["export function fetchFile(path: string) {\n  return new Promise<string>((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = () => {\n      resolve(xhr.responseText);\n    };\n    xhr.onerror = err => {\n      console.error(err);\n      reject('Request failed');\n    };\n    xhr.open('GET', path);\n    xhr.send();\n  });\n}\n"]}]}