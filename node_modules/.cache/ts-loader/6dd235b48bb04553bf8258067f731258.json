{"remainingRequest":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/thread-loader/dist/cjs.js!/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/ts-loader/index.js??ref--13-2!/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/eslint-loader/index.js??ref--12-0!/home/myml/Src/deepin/deepin-manual/src/manual-web/src/directives/my-class.ts","dependencies":[{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/src/directives/my-class.ts","mtime":1540289763988},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/cache-loader/dist/cjs.js","mtime":1535964698825},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/thread-loader/dist/cjs.js","mtime":1535964700766},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/ts-loader/index.js","mtime":1535964694475},{"path":"/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/eslint-loader/index.js","mtime":1538208286718}],"contextDependencies":[],"result":["export var MyClass = function (el, binding) {\n    var _a, _b;\n    var classList = Object.keys(binding.modifiers);\n    if (binding.value) {\n        (_a = el.classList).add.apply(_a, classList);\n    }\n    else {\n        (_b = el.classList).remove.apply(_b, classList);\n    }\n};\n",{"version":3,"file":"/home/myml/Src/deepin/deepin-manual/src/manual-web/src/directives/my-class.ts","sourceRoot":"","sources":["/home/myml/Src/deepin/deepin-manual/src/manual-web/node_modules/eslint-loader/index.js??ref--12-0!/home/myml/Src/deepin/deepin-manual/src/manual-web/src/directives/my-class.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,IAAM,OAAO,GAAsB,UAAC,EAAE,EAAE,OAAO;;IACpD,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjD,IAAI,OAAO,CAAC,KAAK,EAAE;QACjB,CAAA,KAAA,EAAE,CAAC,SAAS,CAAA,CAAC,GAAG,WAAI,SAAS,EAAE;KAChC;SAAM;QACL,CAAA,KAAA,EAAE,CAAC,SAAS,CAAA,CAAC,MAAM,WAAI,SAAS,EAAE;KACnC;AACH,CAAC,CAAC","sourcesContent":["import { DirectiveFunction } from 'vue';\n\nexport const MyClass: DirectiveFunction = (el, binding) => {\n  const classList = Object.keys(binding.modifiers);\n  if (binding.value) {\n    el.classList.add(...classList);\n  } else {\n    el.classList.remove(...classList);\n  }\n};\n"]}]}