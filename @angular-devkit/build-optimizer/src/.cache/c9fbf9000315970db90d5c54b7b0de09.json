{"remainingRequest":"/home/liulang/dev/deepin/deepin-appstore/src/web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liulang/dev/deepin/deepin-appstore/src/web/node_modules/rxjs-compat/_esm5/operator/retry.js","dependencies":[{"path":"/home/liulang/dev/deepin/deepin-appstore/src/web/node_modules/rxjs-compat/_esm5/operator/retry.js","mtime":1525845919216},{"path":"/home/liulang/dev/deepin/deepin-appstore/src/web/node_modules/cache-loader/dist/cjs.js","mtime":1524817670485},{"path":"/home/liulang/dev/deepin/deepin-appstore/src/web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525845918104}],"contextDependencies":[],"result":["import { retry as higherOrder } from 'rxjs/operators';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) { count = -1; }\n    return higherOrder(count)(this);\n}\n//# sourceMappingURL=retry.js.map",null]}